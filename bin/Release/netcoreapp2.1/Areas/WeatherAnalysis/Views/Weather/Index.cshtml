@using Syncfusion.JavaScript;
@using Syncfusion.JavaScript.DataVisualization;
@using Syncfusion.JavaScript.Models
@addTagHelper *, Syncfusion.EJ

@{
    Layout = "~/Areas/WeatherAnalysis/Views/Shared/_Layout.cshtml";
}

@{
    ViewBag.Title = "Essential Studio for ASP.NET Core : Weather Analysis";
}
<div class="top-section">
    <div class="topbox"></div>
    <img src="@Url.Content("~/images/WeatherAnalysis/WeatherIcon.png")" id="WeatherIcon" alt="Weather" />
    <div class="top-inner-section container">
        <div class="row boxcompress">
            <div id="Circle1" class="col-sm-4">
                <div id="Circle_Temperature">
                </div>
                <div id="Circle_SkyCondition">
                </div>
            </div>
            <div id="Circle2" class="col-sm-4">
                <div id="Circle_City">
                    New York
                </div>
                <div id="Circle_Time">
                </div>
                <div id="Circle_Day">
                </div>
            </div>
            <div id="Circle3" class="col-sm-4">
                <div id="tophalf">
                    <div id="Circle_Humidity">
                    </div>
                    <div id="HumidityCaption">
                        Humidity
                    </div>
                </div>
                <div id="bottomhalf">
                    <div id="Circle_DewPoint">
                    </div>
                    <div id="DewPointCaption">
                        Dew Point
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="weather-samples container">
    <div id="ScreenLeft" class="row">
        <div id="HeaderBar1">
            <div>
                <label id="CurrentDay"></label>
                <div class="buttons">
                    <a class="signal inactive" id="ChartHour"></a>
                    <a class="square active" id="GridHour"></a>
                </div>
            </div>
        </div>
        <div id="HourData">
            <ej-grid id="HourGrid" datasource="@ViewBag.datasource">
                <e-columns>
                    <e-column field="Date" header-text="Time" text-align="@TextAlign.Center" width="125" format="{0:hh:mm tt}">
                    </e-column>
                    <e-column field="SkyCondition" header-text="Sky Condition" text-align="@TextAlign.Center" width="120" format="<div class= {SkyCondition}> </div>">
                    </e-column>
                    <e-column field="Temperature" header-text="Temperature" text-align="@TextAlign.Center" width="100" format="<label>{Temperature}&deg;c</label>">
                    </e-column>
                    <e-column field="SkyCondition" header-text="Weather Description" text-align="@TextAlign.Center" width="150">
                    </e-column>
                </e-columns>
            </ej-grid>
            <ej-chart id="HourChart" is-responsive="true" load="hourChartLoad" series-rendering="renderSeries" background="white">
                <e-row-definitions>
                    <e-row-definition row-height="25" line-color="transparent" unit="percentage"></e-row-definition>
                    <e-row-definition row-height="25" line-color="transparent" unit="percentage"></e-row-definition>
                    <e-row-definition row-height="25" line-color="transparent" unit="percentage"></e-row-definition>
                    <e-row-definition row-height="25" line-color="transparent" unit="percentage"></e-row-definition>
                </e-row-definitions>
                <e-primary-x-axis value-type="@AxisValueType.Datetime" label-format="hh:mm tt" interval-type="@ChartIntervalType.Hours">
                    <e-major-grid-lines visible="false"></e-major-grid-lines>
                    <e-minor-grid-lines visible="false"></e-minor-grid-lines>
                    <e-axis-line visible="false"></e-axis-line>
                    <e-range interval="6"></e-range>
                </e-primary-x-axis>
                <e-primary-y-axis label-format="{value}" range-padding="@ChartRangePadding.None" hide-partial-labels="true">
                    <e-major-tick-lines visible="false"></e-major-tick-lines>
                    <e-major-grid-lines visible="false"></e-major-grid-lines>
                    <e-axis-line visible="false"></e-axis-line>
                    <e-range min="-10" max="45" interval="15"></e-range>
                    <e-font color="transparent"></e-font>
                </e-primary-y-axis>
                <e-axes>
                    <e-axis orientation="vertical" row-index="1" opposed-position="false" name="yAxis1" hide-partial-labels="true">
                        <e-major-grid-lines visible="false"></e-major-grid-lines>
                        <e-minor-tick-lines visible="false"></e-minor-tick-lines>
                        <e-major-tick-lines visible="false"></e-major-tick-lines>
                        <e-minor-grid-lines visible="false"></e-minor-grid-lines>
                        <e-range min="-10" max="50" interval="15"></e-range>
                        <e-axis-line visible="false"></e-axis-line>
                        <e-font color="transparent"></e-font>
                    </e-axis>
                    <e-axis orientation="vertical" row-index="2" opposed-position="false" name="yAxis2" hide-partial-labels="true">
                        <e-major-grid-lines visible="false"></e-major-grid-lines>
                        <e-minor-tick-lines visible="false"></e-minor-tick-lines>
                        <e-major-tick-lines visible="false"></e-major-tick-lines>
                        <e-minor-grid-lines visible="false"></e-minor-grid-lines>
                        <e-range min="-10" max="80" interval="15"></e-range>
                        <e-axis-line visible="false"></e-axis-line>
                        <e-font color="transparent"></e-font>
                    </e-axis>
                    <e-axis orientation="vertical" row-index="2" opposed-position="false" name="yAxis3" hide-partial-labels="true">
                        <e-major-grid-lines visible="false"></e-major-grid-lines>
                        <e-minor-tick-lines visible="false"></e-minor-tick-lines>
                        <e-major-tick-lines visible="false"></e-major-tick-lines>
                        <e-minor-grid-lines visible="false"></e-minor-grid-lines>
                        <e-range min="-10" max="50" interval="5"></e-range>
                        <e-axis-line visible="false"></e-axis-line>
                        <e-font color="transparent"></e-font>
                    </e-axis>
                    <e-axis orientation="vertical" row-index="2" opposed-position="false" name="yAxis4" hide-partial-labels="true">
                        <e-major-grid-lines visible="false"></e-major-grid-lines>
                        <e-minor-tick-lines visible="false"></e-minor-tick-lines>
                        <e-major-tick-lines visible="false"></e-major-tick-lines>
                        <e-minor-grid-lines visible="false"></e-minor-grid-lines>
                        <e-range min="-10" max="50" interval="5"></e-range>
                        <e-axis-line visible="false"></e-axis-line>
                        <e-font color="transparent"></e-font>
                    </e-axis>
                </e-axes>
                <e-common-series-options type="@SeriesType.Line" enable-animation="true">
                    <e-marker shape="@ChartShape.Circle">
                        <e-border color="white" width="3"></e-border>
                        <e-Size height="6" width="6"></e-Size>
                    </e-marker>
                </e-common-series-options>
                <e-chart-series>
                    <e-series name="Temperature" fill="#A0C037">
                        <e-chart-tooltip visible="true" format="#series.name#: #point.y# c"></e-chart-tooltip>
                        <e-marker visible="true"></e-marker>
                    </e-series>
                    <e-series name="FeelsLike" fill="#369E45" y-axis-name="yAxis1">
                        <e-chart-tooltip visible="true" format="#series.name#: #point.y# c"></e-chart-tooltip>
                        <e-marker visible="true"></e-marker>
                    </e-series>
                    <e-series name="Humidity" fill="#9F5123" y-axis-name="yAxis2">
                        <e-chart-tooltip visible="true" format="#series.name#: #point.y# %"></e-chart-tooltip>
                        <e-marker visible="true"></e-marker>
                    </e-series>
                    <e-series name="Wind" fill="#2DA2D8" y-axis-name="yAxis3">
                        <e-chart-tooltip visible="true" format="#series.name#: #point.y# mph"></e-chart-tooltip>
                        <e-marker visible="true"></e-marker>
                    </e-series>
                </e-chart-series>
                <e-crosshair visible="true" type="@CrosshairType.Trackball">
                    <e-line width="2" color="#F4B16D"></e-line>
                    <e-marker shape="@ChartShape.Circle" visible="true">
                        <e-Size height="9" width="9"></e-Size>
                    </e-marker>
                </e-crosshair>
                <e-size height="500"></e-size>
                <e-chart-area>
                    <e-border color="transparent"></e-border>
                </e-chart-area>
                <e-margin left="20" top="20"></e-margin>
                <e-legend visible="true" shape="@ChartShape.Circle" position="@LegendPosition.Bottom">
                    <e-item-style width="10" height="10"></e-item-style>
                </e-legend>
            </ej-chart>
        </div>
    </div>
    <div id="ScreenRight" class="row">
        <div id="HeaderBar2">
            <div>
                Average Conditions
                <div class="buttons">
                    <a class="signal active" id="ChartAverage"></a>
                    <a class="square inactive" id="GridAverage"></a>
                </div>
            </div>
        </div>
        <div id="AverageData">
            <ej-chart id="AverageChart" is-responsive="true" load="averageChartLoad" background="white">
                <e-primary-x-axis opposed-position="true" value-type="AxisValueType.Category" >
                    <e-axis-line visible="false"></e-axis-line>
                    <e-major-grid-lines visible="false"></e-major-grid-lines>
                    <e-major-tick-lines visible="false"></e-major-tick-lines>
                </e-primary-x-axis>
                <e-primary-y-axis value-type="AxisValueType.Double" range-padding="@ChartRangePadding.None" label-format="{value} mm">
                    <e-range min="0" max="150" interval="25"></e-range>
                    <e-axis-line visible="false"></e-axis-line>
                </e-primary-y-axis>
                <e-axes>
                    <e-axis orientation="vertical" value-type="AxisValueType.Double" row-index="0" opposed-position="true" range-padding="@ChartRangePadding.None" name="yAxis" label-format="{value} hrs">
                        <e-major-grid-lines visible="false"></e-major-grid-lines>
                        <e-axis-line visible="false"></e-axis-line>
                        <e-range min="0" max="15" interval="2.5"></e-range>
                    </e-axis>
                </e-axes>
                <e-chart-series>
                    <e-series name="Average Precipitation" type="@SeriesType.Column" enable-animation="true" fill="#84c865">
                        <e-chart-tooltip visible="true" template="precipitationTooltip"></e-chart-tooltip>
                    </e-series>
                    <e-series name="Average Sunlight" type="@SeriesType.Column" enable-animation="true" fill="#E94649">
                        <e-chart-tooltip visible="true" template="sunlightTooltip"></e-chart-tooltip>
                    </e-series>
                </e-chart-series>
                <e-size height="500"></e-size>
                <e-legend visible="true" shape="@ChartShape.Circle" position="@LegendPosition.Bottom">
                    <e-item-style height="10" width="10"></e-item-style>
                </e-legend>
            </ej-chart>
            <div class="averagegridwrapper">
                <ej-grid id="AverageGrid" datasource="@ViewBag.datasource1" enable-alt-row="false" allow-grouping="true">
                    <e-columns>
                        <e-column field="Average" header-text="Average" text-align="@TextAlign.Center" width="200"></e-column>
                        <e-column field="Jan" text-align="@TextAlign.Center" width="50"></e-column>
                        <e-column field="Feb" text-align="@TextAlign.Center" width="50"></e-column>
                        <e-column field="Mar" text-align="@TextAlign.Center" width="50"></e-column>
                        <e-column field="Apl" text-align="@TextAlign.Center" width="50"></e-column>
                        <e-column field="Mar" text-align="@TextAlign.Center" width="50"></e-column>
                        <e-column field="Jun" text-align="@TextAlign.Center" width="50"></e-column>
                        <e-column field="Jul" text-align="@TextAlign.Center" width="50"></e-column>
                        <e-column field="Aug" text-align="@TextAlign.Center" width="50"></e-column>
                        <e-column field="Sep" text-align="@TextAlign.Center" width="50"></e-column>
                        <e-column field="Oct" text-align="@TextAlign.Center" width="50"></e-column>
                        <e-column field="Nov" text-align="@TextAlign.Center" width="50"></e-column>
                        <e-column field="Dec" text-align="@TextAlign.Center" width="50"></e-column>
                    </e-columns>
                </ej-grid>
            </div>
        </div>
    </div>
    <div id="precipitationTooltip" style="display: none;">
        <div class="value">
            <div>
                <label class="month">#point.x#</label><br />
                <label class="precipitation">Avg Precipitation (mm) : <b>#point.y#</b></label>
            </div>
        </div>
    </div>
    <div id="sunlightTooltip" style="display: none;">
        <div class="value">
            <div>
                <label class="month">#point.x#</label><br />
                <label class="sunlight">Avg Sunlight (Hrs): <b>#point.y#</b></label>
            </div>
        </div>

    </div>
    <div id="footer">
        <div class="bottom-links">
            <div class="left">
                <div class="sync-text">
                    Copyright © 2001-2019 Syncfusion Inc.
                </div>
            </div>
            <div class="right">
                <a href="https://www.syncfusion.com">
                    <div class="syncfusion-image"></div>
                </a>
            </div>
        </div>
    </div>
</div>
<div class="frame">
</div>
<script type="text/javascript">
    var flag = false;
    var currentDate = new Date();
    var skyCondition = ["Snow", "Rain Storm", "Thunder", "Rainy", "Cloudy", "Partly Cloudy", "Sunny", "Partly Sunny"];
    var currentSkyCondition = Math.floor((Math.random() * 7));
    var WeatherData = [];
    WeatherData.push({
        "Date": new Date(currentDate.setHours(currentDate.getHours())),
        "SkyCondition": skyCondition[currentSkyCondition],
        "Humidity": Math.floor(Math.random() * 40 + 35),
        "Wind": Math.floor(Math.random() * 10 + 1),
        "Pressure": Math.floor(Math.random() * 30 + 70),
        "Temperature": currentSkyCondition * 5 + Math.floor(Math.random() * 5),
        "FeelsLike": currentSkyCondition * 5 + Math.floor(Math.random() * 15)
    });
    $("#CurrentDay").text(ej.format(currentDate, "dddd"));
    $("#Circle_Temperature").html(WeatherData[0].Temperature + "&deg;c");
    $("#Circle_SkyCondition").html(WeatherData[0].SkyCondition);
    $("#Circle_Time").html(ej.format(WeatherData[0].Date, "hh:mm tt"));
    $("#Circle_Day").html(ej.format(WeatherData[0].Date, "dddd"));
    $("#Circle_Humidity").html(WeatherData[0].Humidity + "%");
    $("#Circle_DewPoint").html(Math.floor((Math.random() * 10 + 10)) + "&deg;c");
    for (var i = 1; i < 24; i++) {
        var skyRandom = Math.floor((Math.random() * 7));
        WeatherData.push({
            "Date": new Date(currentDate.setHours(currentDate.getHours() + 1)),
            "SkyCondition": skyCondition[skyRandom],
            "Humidity": Math.floor(Math.random() * 40 + 35),
            "Wind": Math.floor(Math.random() * 10 + 1),
            "Pressure": Math.floor(Math.random() * 30 + 70),
            "Temperature": skyRandom * 5 + Math.floor(Math.random() * 5),
            "FeelsLike": skyRandom * 5 + Math.floor(Math.random() * 15)
        });
    }
    window.WeatherDataObject = WeatherData;
    var data = ej.DataManager(window.WeatherDataObject).executeLocal(ej.Query());
    $("#AverageGrid").find(".groupdroparea").hide();
    $("#AverageGrid").hide();
    $('.buttons > a').bind('click', function () { weatherSelection(this) });
    function renderSeries(sender) {
        if (!flag) {
            $("#HourChart").hide();
            flag = true;
        }
    }

    //It is used to perform navigation between Chart and Grid
    function weatherSelection(target) {
        switch (target.id) {
            case "ChartHour":
                if ($(target).hasClass("inactive")) {
                    $(target).removeClass("inactive").addClass("active");
                    $("#GridHour").removeClass("active").addClass("inactive");
                    $("#HourGrid").hide();
                    $("#HourChart").show();
                    var chartobj = $("#HourChart").data("ejChart");
                    chartobj.chartResize();
                }
                break;
            case "GridHour":
                if ($(target).hasClass("inactive")) {
                    $(target).removeClass("inactive").addClass("active");
                    $("#ChartHour").removeClass("active").addClass("inactive");
                    $("#HourChart").hide();
                    $("#HourGrid").show();
                }
                break;
            case "ChartAverage":
                if ($(target).hasClass("inactive")) {
                    $(target).removeClass("inactive").addClass("active");
                    $("#GridAverage").removeClass("active").addClass("inactive");
                    $("#AverageGrid").hide();
                    $("#AverageChart").show();
                    var chartobj = $("#AverageChart").data("ejChart");
                    chartobj.chartResize();
                }
                break;
            case "GridAverage":
                if ($(target).hasClass("inactive")) {
                    $(target).removeClass("inactive").addClass("active");
                    $("#ChartAverage").removeClass("active").addClass("inactive");
                    $("#AverageChart").hide();
                    $("#AverageGrid").show();
                }
                break;
        }
    }

    //It is used to set data source for the chart to series in model
    function hourChartLoad(sender) {
        var data = getHourData();
        sender.model.primaryXAxis.range.min = window.WeatherData[0].Date;
        sender.model.primaryXAxis.range.max = window.WeatherData[window.WeatherData.length - 1].Date;
        sender.model.series[0].dataSource = data.Temperature;
        sender.model.series[0].xName = "XValue";
        sender.model.series[0].yName = "YValue";
        sender.model.series[1].dataSource = data.FeelsLike;
        sender.model.series[1].xName = "XValue";
        sender.model.series[1].yName = "YValue";
        sender.model.series[2].dataSource = data.Humidity;
        sender.model.series[2].xName = "XValue";
        sender.model.series[2].yName = "YValue";
        sender.model.series[3].dataSource = data.Wind;
        sender.model.series[3].xName = "XValue";
        sender.model.series[3].yName = "YValue";
    }

    //It is used to retrieve data for binding chart to display hour details for the day
    function getHourData() {
        var series1 = [];
        var series2 = [];
        var series3 = [];
        var series4 = [];
        $.each(window.WeatherDataObject, function (index, value) {
            var point1 = { XValue: value.Date, YValue: value.Temperature };
            var point2 = { XValue: value.Date, YValue: value.FeelsLike };
            var point3 = { XValue: value.Date, YValue: value.Humidity };
            var point4 = { XValue: value.Date, YValue: value.Wind };
            series1.push(point1);
            series2.push(point2);
            series3.push(point3);
            series4.push(point4);
        });
        var data = { Temperature: series1, FeelsLike: series2, Humidity: series3, Wind: series4 };
        return data;
    }

    //It is used to set data source for the chart to series in model
    function averageChartLoad(sender) {
        var data = getAverageData();
        sender.model.series[0].dataSource = data.Precipitation;
        sender.model.series[0].xName = "XValue";
        sender.model.series[0].yName = "YValue";
        sender.model.series[1].dataSource = data.Sunlight;
        sender.model.series[1].xName = "XValue";
        sender.model.series[1].yName = "YValue";
    }

    //It is used to retrieve data for binding chart to display average record details for the year
    function onchartload(sender) {
        var data = getData(5);
        sender.model.series[0].dataSource = data.Open;
        sender.model.series[0].xName = "XValue";
        sender.model.series[0].yName = "YValue";
        sender.model.series[1].dataSource = data.Close;
        sender.model.series[1].xName = "XValue";
        sender.model.series[1].yName = "YValue";
    }
    var Average = ["Average Precipitation", "Average Sunlight", "Average Minimum Temperature", "Average Maximum Temperature", "Average Wind"];
    var AverageData = [];
    var months = ["Jan", "Feb", "Mar", "Apl", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    var d = {};
    d["Average"] = "Precipitation";
    for (var i = 0; i < 12; i++) {
        var date = new Date();
        var monthValue = date.getMonth() + i;
        if (monthValue < 12)
            d[months[new Date(date.setMonth(monthValue)).getMonth()]] = Math.floor((Math.random() * 100 + 20));
        else {
            monthValue = monthValue - 12;
            d[months[new Date(date.setMonth(monthValue)).getMonth()]] = Math.floor((Math.random() * 100 + 20));
        }
    }
    AverageData.push(d);

    var d = {};
    d["Average"] = "Sunlight";
    for (var i = 0; i < 12; i++) {
        var date = new Date();
        var monthValue = date.getMonth() + i;
        if (monthValue < 12)
            d[months[new Date(date.setMonth(monthValue)).getMonth()]] = Math.floor((Math.random() * 12 + 2));
        else {
            monthValue = monthValue - 12;
            d[months[new Date(date.setMonth(monthValue)).getMonth()]] = Math.floor((Math.random() * 12 + 2));
        }
    }
    AverageData.push(d);

    var d = {};
    d["Average"] = "Minimum Temperature";
    for (var i = 0; i < 12; i++) {
        var date = new Date();
        var monthValue = date.getMonth() + i;
        if (monthValue < 12)
            d[months[new Date(date.setMonth(monthValue)).getMonth()]] = Math.floor((Math.random() * 15 - 5));
        else {
            monthValue = monthValue - 12;
            d[months[new Date(date.setMonth(monthValue)).getMonth()]] = Math.floor((Math.random() * 15 - 5));
        }
    }
    AverageData.push(d);

    var d = {};
    d["Average"] = "Maximum Temperature";
    for (var i = 0; i < 12; i++) {
        var date = new Date();
        var monthValue = date.getMonth() + i;
        if (monthValue < 12)
            d[months[new Date(date.setMonth(monthValue)).getMonth()]] = Math.floor((Math.random() * 20 + 25));
        else {
            monthValue = monthValue - 12;
            d[months[new Date(date.setMonth(monthValue)).getMonth()]] = Math.floor((Math.random() * 20 + 25));
        }
    }
    AverageData.push(d);

    var d = {};
    d["Average"] = "Wind";
    for (var i = 0; i < 12; i++) {
        var date = new Date();
        var monthValue = date.getMonth() + i;
        if (monthValue < 12)
            d[months[new Date(date.setMonth(monthValue)).getMonth()]] = Math.floor((Math.random() * 15));
        else {
            monthValue = monthValue - 12;
            d[months[new Date(date.setMonth(monthValue)).getMonth()]] = Math.floor((Math.random() * 15));
        }
    }
    AverageData.push(d);
    window.AverageData = AverageData;

    var averageData = ej.DataManager(window.AverageData).executeLocal(ej.Query());
    var columnNames = [];
    $.each(averageData[0], function (index, value) {
        if (index == "Average") {
            var column = { field: index, textAlign: ej.TextAlign.Center }
            columnNames.push(column);
        }
        else {
            var column = { field: index, textAlign: ej.TextAlign.Center, width: 50, customAttributes: { "class": "e-rowcell average" } }
            columnNames.push(column);
        }
    });

    //Set Data entry for Column chart
    function getData(year) {
        var series1 = [];
        var series2 = [];
        var value = 100;
        var value1 = 150;

        for (var i = 1; i <= 64; i++) {
            if (Math.random() > 5) {
                value = getRandomNum(700, 800);
            } else {
                value = getRandomNum(350, 700);
            }
            var point = { XValue: new Date(2008, 01 + i, 15), YValue: value };
            series1.push(point);
            if (value > 400)
                value1 = value - 100;
            else
                value1 = value + 200;
            var point1 = { XValue: new Date(2008, 01 + i, 15), YValue: value1 };
            series2.push(point1);
        }
        var data = { Open: series1, Close: series2 };
        return data;
    }
    function getRandomNum(ubound, lbound) {

        return (Math.floor(Math.random() * (ubound - lbound)) + lbound);
    }
    function getAverageData() {
        var series1 = [];
        var series2 = [];
        $.each(window.AverageData[0], function (index, value) {
            if (index != "Average") {
                var point1 = { XValue: index, YValue: value };
                series1.push(point1);
            }
        });
        $.each(window.AverageData[1], function (index, value) {
            if (index != "Average") {
                var point1 = { XValue: index, YValue: value };
                series2.push(point1);
            }
        });
        var data = { Precipitation: series1, Sunlight: series2 };
        return data;
    }
</script>















