@section SampleHeading{ <span class="sampleName">Accordion / Events</span>}

@section ControlsSection{

    <ej-accordion id="eventAccordion" create="onCreate" ajax-error="onError" before-activate="onBeforeActivate" activate="onActivate" before-in-activate="onBeforeInActivate" in-activate="onInActivate" ajax-before-load="onBeforeLoad" ajax-load="onLoad" ajax-success="onAjaxSuccess">
        <e-accordion-items>
            <e-accordion-item text="ASP.NET">
                <e-content-template>
                    <div>
                        Essential Chart for ASP.NET MVC is a visually stunning, high-performance charting component that is easy to use.
                        It includes 35 chart types ranging from simple column charts to specialized financial charts.
                        The charts are highly customizable and have a powerful data model that makes data binding simple.
                    </div>
                </e-content-template>
            </e-accordion-item>
            <e-accordion-item text="ASP.NET MVC">
                <e-content-template>
                    <div>
                        The Model-View-Controller (MVC) architectural pattern separates an application into three main components:
                        the model, the view, and the controller. The ASP.NET MVC framework provides an alternative to the ASP.NET Web Forms pattern for creating Web applications. The ASP.NET MVC framework is a lightweight, highly testable presentation framework that (as with Web Forms-based applications) is integrated with existing ASP.NET features, such as master pages and membership-based authentication.

                    </div>
                </e-content-template>
            </e-accordion-item>
            <e-accordion-item text="Javascript">
                <e-content-template>
                    <div>
                        JavaScript (JS) is an interpreted computer programming language.
                        It was originally implemented as part of web browsers so that client-side scripts could interact with the user, control the browser,
                        communicate asynchronously, and alter the document content that was displayed. More recently, however,
                        it has become common in both game development and the creation of desktop applications.
                    </div>
                </e-content-template>
            </e-accordion-item>
        </e-accordion-items>
    </ej-accordion>
    }
<div id="dropTarget">
    <ul>
        <li>create</li>
        <li>beforeActivate</li>
        <li>activate</li>
        <li>beforeInactivate</li>
        <li>inActivate</li>
        <li>ajaxBeforeLoad</li>
        <li>ajaxLoad</li>
        <li>ajaxSuccess</li>
        <li>ajaxError</li>
    </ul>
</div>
@section EventsDropdown{

    <ej-drop-down-list id="selectControls_input" target-id="dropTarget" show-checkbox="true" width="160px" check-all="true" change="evtpropscheckedevent">  </ej-drop-down-list>
}
@section ScriptSection{
    <script>
        function onCreate(args) {
            jQuery.addEventLog("Accordion has been <span class='eventTitle'>created</span>.");
        }
        function onBeforeActivate(args) {
            if (!ej.isNullOrUndefined(args.activeIndex))
                jQuery.addEventLog("<span class='eventTitle'>BeforeActiveClick</span> event is fired for Index " + args.activeIndex + ".");
        }
        function onActivate(args) {
            if (!ej.isNullOrUndefined(args.activeIndex))
                jQuery.addEventLog("<span class='eventTitle'>ActiveClick</span> event is fired for Index " + args.activeIndex + ".");
        }
        function onBeforeInActivate(args) {
            if (!ej.isNullOrUndefined(args.inActiveIndex))
                jQuery.addEventLog("Index " + args.inActiveIndex + " is on <span class='eventTitle'>BeforeInActive</span>.");
        }
        function onInActivate(args) {
            if (!ej.isNullOrUndefined(args.inActiveIndex))
                jQuery.addEventLog("Index " + args.inActiveIndex + " is on <span class='eventTitle'>inActive</span>.");
        }
        function onBeforeLoad(args) {
            jQuery.addEventLog("<span class='eventTitle'>BeforeLoad</span> event is fired.");
        }
        function onLoad(args) {
            jQuery.addEventLog("Ajax content is <span class='eventTitle'>loaded</span>.");
        }
        function onAjaxSuccess(args) {
            jQuery.addEventLog("Ajax content is loaded <span class='eventTitle'>successfully</span>.");
        }
        function onError(args) {
            jQuery.addEventLog("Ajax content is loaded with an <span class='eventTitle'>error</span>.");
        }
        function onClear() {
            jQuery.clearEventLog();
        }
        function evtpropscheckedevent(args) {
            acrdnObj = $("#eventAccordion").data("ejAccordion");
            if (args.isChecked) {
                switch (args.selectedText) {
                    case "create": acrdnObj.option(args.selectedText, "onCreate"); break;
                    case "beforeActivate": acrdnObj.option(args.selectedText, "onBeforeActivate"); break;
                    case "activate": acrdnObj.option(args.selectedText, "onActivate"); break;
                    case "beforeInactivate": acrdnObj.option(args.selectedText, "onBeforeInActivate"); break;
                    case "inActivate": acrdnObj.option(args.selectedText, "onInActivate"); break;
                    case "ajaxBeforeLoad": acrdnObj.option(args.selectedText, "onBeforeLoad"); break;
                    case "ajaxLoad": acrdnObj.option(args.selectedText, "onLoad"); break;
                    case "ajaxSuccess": acrdnObj.option(args.selectedText, "onAjaxSuccess"); break;
                    case "ajaxError": acrdnObj.option(args.selectedText, "onError"); break;
                }
            }
            else acrdnObj.option(args.selectedText, null);
        }
    </script>
}
